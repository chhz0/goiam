// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/chhz0/goiam/internal/apisvr/service/v1 (interfaces: UserSrv,SecretSrv,PolicySrv)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/chhz0/goiam/internal/pkg/model"
	meta "github.com/chhz0/goiam/pkg/meta"
	gomock "github.com/golang/mock/gomock"
)

// MockUserSrv is a mock of UserSrv interface.
type MockUserSrv struct {
	ctrl     *gomock.Controller
	recorder *MockUserSrvMockRecorder
}

// MockUserSrvMockRecorder is the mock recorder for MockUserSrv.
type MockUserSrvMockRecorder struct {
	mock *MockUserSrv
}

// NewMockUserSrv creates a new mock instance.
func NewMockUserSrv(ctrl *gomock.Controller) *MockUserSrv {
	mock := &MockUserSrv{ctrl: ctrl}
	mock.recorder = &MockUserSrvMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSrv) EXPECT() *MockUserSrvMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockUserSrv) ChangePassword(arg0 context.Context, arg1 *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockUserSrvMockRecorder) ChangePassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockUserSrv)(nil).ChangePassword), arg0, arg1)
}

// Create mocks base method.
func (m *MockUserSrv) Create(arg0 context.Context, arg1 *model.User, arg2 meta.CreateOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserSrvMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserSrv)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockUserSrv) Delete(arg0 context.Context, arg1 string, arg2 meta.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserSrvMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserSrv)(nil).Delete), arg0, arg1, arg2)
}

// DeleteCollection mocks base method.
func (m *MockUserSrv) DeleteCollection(arg0 context.Context, arg1 []string, arg2 meta.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockUserSrvMockRecorder) DeleteCollection(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockUserSrv)(nil).DeleteCollection), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockUserSrv) Get(arg0 context.Context, arg1 string, arg2 meta.GetOptions) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserSrvMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserSrv)(nil).Get), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockUserSrv) List(arg0 context.Context, arg1 meta.ListOptions) (*model.UserList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*model.UserList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockUserSrvMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUserSrv)(nil).List), arg0, arg1)
}

// ListWithBadPerformance mocks base method.
func (m *MockUserSrv) ListWithBadPerformance(arg0 context.Context, arg1 meta.ListOptions) (*model.UserList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWithBadPerformance", arg0, arg1)
	ret0, _ := ret[0].(*model.UserList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWithBadPerformance indicates an expected call of ListWithBadPerformance.
func (mr *MockUserSrvMockRecorder) ListWithBadPerformance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWithBadPerformance", reflect.TypeOf((*MockUserSrv)(nil).ListWithBadPerformance), arg0, arg1)
}

// Update mocks base method.
func (m *MockUserSrv) Update(arg0 context.Context, arg1 *model.User, arg2 meta.UpdateOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserSrvMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserSrv)(nil).Update), arg0, arg1, arg2)
}

// MockSecretSrv is a mock of SecretSrv interface.
type MockSecretSrv struct {
	ctrl     *gomock.Controller
	recorder *MockSecretSrvMockRecorder
}

// MockSecretSrvMockRecorder is the mock recorder for MockSecretSrv.
type MockSecretSrvMockRecorder struct {
	mock *MockSecretSrv
}

// NewMockSecretSrv creates a new mock instance.
func NewMockSecretSrv(ctrl *gomock.Controller) *MockSecretSrv {
	mock := &MockSecretSrv{ctrl: ctrl}
	mock.recorder = &MockSecretSrvMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretSrv) EXPECT() *MockSecretSrvMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSecretSrv) Create(arg0 context.Context, arg1 *model.Secret, arg2 meta.CreateOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSecretSrvMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSecretSrv)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockSecretSrv) Delete(arg0 context.Context, arg1, arg2 string, arg3 meta.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSecretSrvMockRecorder) Delete(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSecretSrv)(nil).Delete), arg0, arg1, arg2, arg3)
}

// DeleteCollection mocks base method.
func (m *MockSecretSrv) DeleteCollection(arg0 context.Context, arg1 string, arg2 []string, arg3 meta.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockSecretSrvMockRecorder) DeleteCollection(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockSecretSrv)(nil).DeleteCollection), arg0, arg1, arg2, arg3)
}

// Get mocks base method.
func (m *MockSecretSrv) Get(arg0 context.Context, arg1, arg2 string, arg3 meta.GetOptions) (*model.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*model.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSecretSrvMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSecretSrv)(nil).Get), arg0, arg1, arg2, arg3)
}

// List mocks base method.
func (m *MockSecretSrv) List(arg0 context.Context, arg1 string, arg2 meta.ListOptions) (*model.SecretList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.SecretList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSecretSrvMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSecretSrv)(nil).List), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockSecretSrv) Update(arg0 context.Context, arg1 *model.Secret, arg2 meta.UpdateOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSecretSrvMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSecretSrv)(nil).Update), arg0, arg1, arg2)
}

// MockPolicySrv is a mock of PolicySrv interface.
type MockPolicySrv struct {
	ctrl     *gomock.Controller
	recorder *MockPolicySrvMockRecorder
}

// MockPolicySrvMockRecorder is the mock recorder for MockPolicySrv.
type MockPolicySrvMockRecorder struct {
	mock *MockPolicySrv
}

// NewMockPolicySrv creates a new mock instance.
func NewMockPolicySrv(ctrl *gomock.Controller) *MockPolicySrv {
	mock := &MockPolicySrv{ctrl: ctrl}
	mock.recorder = &MockPolicySrvMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolicySrv) EXPECT() *MockPolicySrvMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPolicySrv) Create(arg0 context.Context, arg1 *model.Policy, arg2 meta.CreateOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPolicySrvMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPolicySrv)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockPolicySrv) Delete(arg0 context.Context, arg1, arg2 string, arg3 meta.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPolicySrvMockRecorder) Delete(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPolicySrv)(nil).Delete), arg0, arg1, arg2, arg3)
}

// DeleteCollection mocks base method.
func (m *MockPolicySrv) DeleteCollection(arg0 context.Context, arg1 string, arg2 []string, arg3 meta.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockPolicySrvMockRecorder) DeleteCollection(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockPolicySrv)(nil).DeleteCollection), arg0, arg1, arg2, arg3)
}

// Get mocks base method.
func (m *MockPolicySrv) Get(arg0 context.Context, arg1, arg2 string, arg3 meta.GetOptions) (*model.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*model.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPolicySrvMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPolicySrv)(nil).Get), arg0, arg1, arg2, arg3)
}

// List mocks base method.
func (m *MockPolicySrv) List(arg0 context.Context, arg1 string, arg2 meta.ListOptions) (*model.PolicyList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.PolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPolicySrvMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPolicySrv)(nil).List), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockPolicySrv) Update(arg0 context.Context, arg1 *model.Policy, arg2 meta.UpdateOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPolicySrvMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPolicySrv)(nil).Update), arg0, arg1, arg2)
}
